/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Thu Jan  9 15:05:48 KST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkTest.h"

namespace bluesim
{
  
  /* String declarations */
  static std::string const __str_literal_2("End of test: %x\n", 16u);
  static std::string const __str_literal_1("Instruction code at pc %d : %x", 30u);
  
  
  /* Constructor */
  MOD_mkTest::MOD_mkTest(char const *name, Module *parent)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      INST_iMem("iMem", this),
      INST_pc("pc", this, 32u, 0u, (tUInt8)0u),
      PORT_RST_N((tUInt8)1u)
  {
    symbol_count = 5u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkTest::init_symbols_0()
  {
    init_symbol(&symbols[0u], "iMem", SYM_MODULE, &INST_iMem);
    init_symbol(&symbols[1u], "pc", SYM_MODULE, &INST_pc);
    init_symbol(&symbols[2u], "RL_finish", SYM_RULE);
    init_symbol(&symbols[3u], "RL_run", SYM_RULE);
    init_symbol(&symbols[4u], "x__h557", SYM_DEF, &DEF_x__h557, 32u);
  }
  
  
  /* Rule actions */
  
  void MOD_mkTest::RL_run()
  {
    tUInt32 DEF_x__h551;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_3_7_8_AND_NOT_ETC___d24;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d42;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d34;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d15;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d47;
    tUInt8 DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_2_6___d36;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d9;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d68;
    tUInt32 DEF_offset__h155;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_7_6_OR_iMem_req_p_ETC___d62;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_3_7_OR_iMem_req_p_ETC___d66;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_0___d69;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_1___d70;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_2___d67;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_3___d59;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_4___d58;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_5___d65;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_6___d64;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_7___d60;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_8___d61;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_44_EQ_9___d63;
    tUInt8 DEF_iCode__h166;
    tUInt8 DEF_iMem_req_pc_BITS_47_TO_40___d10;
    tUInt32 DEF_iMem_req_pc_BITS_47_TO_32___d35;
    tUInt64 DEF_iMem_req_pc_BITS_47_TO_8___d43;
    tUInt64 DEF_iMem_req_pc___d57;
    DEF_x__h557 = INST_pc.METH_read();
    DEF_iMem_req_pc___d57 = INST_iMem.METH_req(DEF_x__h557);
    DEF_iMem_req_pc_BITS_47_TO_8___d43 = (tUInt64)(DEF_iMem_req_pc___d57 >> 8u);
    DEF_iMem_req_pc_BITS_47_TO_32___d35 = (tUInt32)(DEF_iMem_req_pc___d57 >> 32u);
    DEF_iMem_req_pc_BITS_47_TO_40___d10 = (tUInt8)(DEF_iMem_req_pc___d57 >> 40u);
    DEF_iCode__h166 = (tUInt8)(DEF_iMem_req_pc___d57 >> 44u);
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_9___d63 = DEF_iCode__h166 == (tUInt8)9u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_8___d61 = DEF_iCode__h166 == (tUInt8)8u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_7___d60 = DEF_iCode__h166 == (tUInt8)7u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_6___d64 = DEF_iCode__h166 == (tUInt8)6u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_5___d65 = DEF_iCode__h166 == (tUInt8)5u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_4___d58 = DEF_iCode__h166 == (tUInt8)4u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_2___d67 = DEF_iCode__h166 == (tUInt8)2u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_3___d59 = DEF_iCode__h166 == (tUInt8)3u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_1___d70 = DEF_iCode__h166 == (tUInt8)1u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_0___d69 = DEF_iCode__h166 == (tUInt8)0u;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_3_7_OR_iMem_req_p_ETC___d66 = DEF_iMem_req_pc_BITS_47_TO_44_EQ_3___d59 || (DEF_iMem_req_pc_BITS_47_TO_44_EQ_4___d58 || DEF_iMem_req_pc_BITS_47_TO_44_EQ_5___d65);
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_7_6_OR_iMem_req_p_ETC___d62 = DEF_iMem_req_pc_BITS_47_TO_44_EQ_7___d60 || DEF_iMem_req_pc_BITS_47_TO_44_EQ_8___d61;
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d68 = DEF_iMem_req_pc_BITS_47_TO_44_EQ_0___d69 || DEF_iMem_req_pc_BITS_47_TO_44_EQ_1___d70;
    DEF_offset__h155 = DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d68 ? 1u : (DEF_iMem_req_pc_BITS_47_TO_44_EQ_2___d67 ? 2u : (DEF_iMem_req_pc_BITS_47_TO_44_EQ_3_7_OR_iMem_req_p_ETC___d66 ? 6u : (DEF_iMem_req_pc_BITS_47_TO_44_EQ_6___d64 ? 2u : (DEF_iMem_req_pc_BITS_47_TO_44_EQ_7_6_OR_iMem_req_p_ETC___d62 ? 5u : (DEF_iMem_req_pc_BITS_47_TO_44_EQ_9___d63 ? 1u : 2u)))));
    DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d9 = DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d68 || DEF_iMem_req_pc_BITS_47_TO_44_EQ_9___d63;
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_2_6___d36 = !DEF_iMem_req_pc_BITS_47_TO_44_EQ_2___d67;
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d15 = (!DEF_iMem_req_pc_BITS_47_TO_44_EQ_0___d69 && !DEF_iMem_req_pc_BITS_47_TO_44_EQ_1___d70) && !DEF_iMem_req_pc_BITS_47_TO_44_EQ_9___d63;
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d47 = DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d15 && (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_2_6___d36 && DEF_iMem_req_pc_BITS_47_TO_44_EQ_3_7_OR_iMem_req_p_ETC___d66);
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_3_7_8_AND_NOT_ETC___d24 = !DEF_iMem_req_pc_BITS_47_TO_44_EQ_3___d59 && (!DEF_iMem_req_pc_BITS_47_TO_44_EQ_4___d58 && !DEF_iMem_req_pc_BITS_47_TO_44_EQ_5___d65);
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d34 = DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d15 && (DEF_iMem_req_pc_BITS_47_TO_44_EQ_2___d67 || (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_3_7_8_AND_NOT_ETC___d24 && (DEF_iMem_req_pc_BITS_47_TO_44_EQ_6___d64 || (!DEF_iMem_req_pc_BITS_47_TO_44_EQ_7___d60 && !DEF_iMem_req_pc_BITS_47_TO_44_EQ_8___d61))));
    DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d42 = DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d15 && (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_2_6___d36 && (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_3_7_8_AND_NOT_ETC___d24 && (!DEF_iMem_req_pc_BITS_47_TO_44_EQ_6___d64 && DEF_iMem_req_pc_BITS_47_TO_44_EQ_7_6_OR_iMem_req_p_ETC___d62)));
    DEF_x__h551 = DEF_x__h557 + DEF_offset__h155;
    if (!(PORT_RST_N == (tUInt8)0u))
    {
      if (DEF_iMem_req_pc_BITS_47_TO_44_EQ_0_OR_iMem_req_pc__ETC___d9)
	dollar_display(this, "s,32,8", &__str_literal_1, DEF_x__h557, DEF_iMem_req_pc_BITS_47_TO_40___d10);
      if (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d34)
	dollar_display(this, "s,32,16", &__str_literal_1, DEF_x__h557, DEF_iMem_req_pc_BITS_47_TO_32___d35);
      if (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d42)
	dollar_display(this, "s,32,40", &__str_literal_1, DEF_x__h557, DEF_iMem_req_pc_BITS_47_TO_8___d43);
      if (DEF_NOT_iMem_req_pc_BITS_47_TO_44_EQ_0_1_AND_NOT_i_ETC___d47)
	dollar_display(this, "s,32,48", &__str_literal_1, DEF_x__h557, DEF_iMem_req_pc___d57);
    }
    INST_pc.METH_write(DEF_x__h551);
  }
  
  void MOD_mkTest::RL_finish()
  {
    tUInt32 DEF_signed_26___d56;
    DEF_signed_26___d56 = 26u;
    if (!(PORT_RST_N == (tUInt8)0u))
    {
      dollar_display(this, "s,-32", &__str_literal_2, DEF_signed_26___d56);
      dollar_finish("32", 1u);
    }
  }
  
  
  /* Methods */
  
  
  /* Reset routines */
  
  void MOD_mkTest::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
    INST_pc.reset_RST_N(ARG_rst_in);
    INST_iMem.reset_RST_N(ARG_rst_in);
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkTest::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkTest::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_iMem.dump_state(indent + 2u);
    INST_pc.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkTest::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(3u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "x__h557", 32u);
    num = INST_pc.dump_VCD_defs(num);
    if (levels != 1u)
    {
      unsigned int l = levels == 0u ? 0u : levels - 1u;
      num = INST_iMem.dump_VCD_defs(l);
    }
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing)
  {
    vcd_defs(dt, backing);
    vcd_prims(dt, backing);
    if (levels != 1u)
      vcd_submodules(dt, levels - 1u, backing);
  }
  
  void MOD_mkTest::vcd_defs(tVCDDumpType dt, MOD_mkTest &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 32u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.DEF_x__h557) != DEF_x__h557)
	{
	  vcd_write_val(num, DEF_x__h557, 32u);
	  backing.DEF_x__h557 = DEF_x__h557;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, DEF_x__h557, 32u);
	backing.DEF_x__h557 = DEF_x__h557;
      }
  }
  
  void MOD_mkTest::vcd_prims(tVCDDumpType dt, MOD_mkTest &backing)
  {
    INST_pc.dump_VCD(dt, backing.INST_pc);
  }
  
  void MOD_mkTest::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing)
  {
    INST_iMem.dump_VCD(dt, levels, backing.INST_iMem);
  }
}
